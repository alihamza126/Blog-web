{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["// contentlayer.config.js\n\nimport { makeSource, defineDocumentType } from '@contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\nimport GithubSlugger from 'github-slugger';\n\nconst Blog = defineDocumentType(() => ({\n    name: 'Blog',\n    filePathPattern: '**/**/*.mdx',\n    contentType: 'mdx',\n    fields: {\n        title: {\n            type: 'string',\n        },\n        description: {\n            type: 'string',\n            require: true\n        },\n        publishedAt: {\n            type: 'date',\n            require: true\n        },\n        updatedAt: {\n            type: 'date',\n            require: true\n        },\n        image: {\n            type: 'image',\n            require: true\n        },\n        isPublished: {\n            type: 'boolean',\n            require: true\n        },\n        author: {\n            type: 'string',\n            require: true\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n    },\n    computedFields: {\n        url_path: {\n            type: 'string',\n            resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n        },\n        readingTime: {\n            type: \"json\",\n            resolve: (doc) => readingTime(doc.body.raw)\n        },\n        toc: {\n            type: \"json\",\n            resolve: async (doc) => {\n                const regXHeader = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n                const slugger = new GithubSlugger()\n                const headings = Array.from(doc.body.raw.matchAll(regXHeader)).map(\n                    ({ groups }) => {\n                        const flag = groups?.flag;\n                        const content = groups?.content;\n                        return {\n                            level: flag?.length == 1 ? \"one\"\n                                : flag?.length == 2 ? \"two\"\n                                    : \"three\",\n                            text: content,\n                            slug: content ? slugger.slug(content) : undefined\n                        };\n                    }\n                );\n                return headings;\n            }\n        }\n    },\n}));\n\nconst codeOptions = {\n    theme: 'github-dark'\n}\n\nexport default makeSource({\n    contentDirPath: 'content',\n    documentTypes: [Blog],\n    mdx: {\n        remarkPlugins: [remarkGfm],\n        rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: 'append' }],\n            [rehypePrettyCode, codeOptions]\n        ]\n    }\n})"],
  "mappings": ";AAEA,SAAS,YAAY,0BAA0B;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,WAAW;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,UAAU;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACtD;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC9C;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACpB,cAAM,aAAa;AACnB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE;AAAA,UAC3D,CAAC,EAAE,OAAO,MAAM;AACZ,kBAAM,OAAO,QAAQ;AACrB,kBAAM,UAAU,QAAQ;AACxB,mBAAO;AAAA,cACH,OAAO,MAAM,UAAU,IAAI,QACrB,MAAM,UAAU,IAAI,QAChB;AAAA,cACV,MAAM;AAAA,cACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,YAC5C;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;AAEF,IAAM,cAAc;AAAA,EAChB,OAAO;AACX;AAEA,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACD,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MAAC;AAAA,MAAY,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC;AAAA,MACvE,CAAC,kBAAkB,WAAW;AAAA,IAClC;AAAA,EACJ;AACJ,CAAC;",
  "names": []
}
